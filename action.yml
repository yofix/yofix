name: 'yofix'
description: 'AI-powered visual issue detection and auto-fix for web applications'
author: 'YoFix'

branding:
  icon: 'activity'
  color: 'purple'

inputs:
  preview-url:
    description: 'Firebase preview URL (e.g., https://project--pr-123-app.web.app)'
    required: true
  
  github-token:
    description: 'GitHub token for posting PR comments'
    required: true
  
  claude-api-key:
    description: 'Claude API key for intelligent route analysis'
    required: true
  
  # Storage Configuration
  storage-provider:
    description: 'Storage provider: firebase, s3, or auto (auto-detect)'
    required: false
    default: 'auto'
  
  # Firebase Storage
  firebase-credentials:
    description: 'Base64 encoded Firebase service account JSON'
    required: false
  
  storage-bucket:
    description: 'Firebase Storage bucket name'
    required: false
  
  # S3 Storage
  s3-bucket:
    description: 'AWS S3 bucket name'
    required: false
  
  aws-region:
    description: 'AWS region for S3 bucket'
    required: false
    default: 'us-east-1'
  
  aws-access-key-id:
    description: 'AWS access key ID (uses default credentials if not provided)'
    required: false
  
  aws-secret-access-key:
    description: 'AWS secret access key (uses default credentials if not provided)'
    required: false
  
  # Cache Configuration
  redis-url:
    description: 'Redis URL for caching (format: redis://user:pass@host:port)'
    required: false
  
  cache-ttl:
    description: 'Cache TTL in seconds'
    required: false
    default: '3600'
  
  # MCP Configuration
  mcp-provider:
    description: 'MCP provider: built-in or playwright-official'
    required: false
    default: 'built-in'
  
  mcp-options:
    description: 'JSON string of MCP options'
    required: false
    default: '{}'
  
  firebase-project-id:
    description: 'Firebase project ID (auto-detected from preview URL if not provided)'
    required: false
  
  firebase-target:
    description: 'Firebase hosting target (auto-detected from preview URL if not provided)'
    required: false
  
  build-system:
    description: 'Build system: vite or react (auto-detected from output folder if not provided)'
    required: false
    default: ''
  
  test-timeout:
    description: 'Maximum time for tests to run (e.g., 5m, 300s)'
    required: false
    default: '5m'
  
  cleanup-days:
    description: 'Days to keep old screenshots before cleanup'
    required: false
    default: '30'
  
  viewports:
    description: 'Comma-separated viewport sizes (e.g., 1920x1080,768x1024,375x667)'
    required: false
    default: '1920x1080,768x1024,375x667'
  
  max-routes:
    description: 'Maximum number of routes to test'
    required: false
    default: '10'
  
  auth-email:
    description: 'Email for authentication (if app requires login)'
    required: false
  
  auth-password:
    description: 'Password for authentication (if app requires login)'
    required: false
  
  auth-login-url:
    description: 'Login page URL path'
    required: false
    default: '/login/password'

outputs:
  status:
    description: 'Test execution status'
  
  summary-url:
    description: 'URL to the test results summary'
  
  firebase-project:
    description: 'Detected Firebase project ID'
  
  firebase-target:
    description: 'Detected Firebase hosting target'
  
  build-system:
    description: 'Detected build system'

runs:
  using: 'composite'
  steps:
    # Get Playwright version for cache key
    - name: Get Playwright version
      id: playwright-version
      shell: bash
      run: |
        # Default Playwright version
        echo "version=1.54.1" >> $GITHUB_OUTPUT
    
    # Cache Playwright browsers and dependencies
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
          ~/playwright-deps
        key: playwright-browsers-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-v2
        restore-keys: |
          playwright-browsers-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-
          playwright-browsers-${{ runner.os }}-
    
    # Install or restore Playwright
    - name: Setup Playwright
      shell: bash
      run: |
        cd ${{ github.action_path }}
        
        if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != "true" ]; then
          echo "ðŸ“¦ Installing Playwright browsers (cache miss)..."
          
          # Install Playwright with browsers and dependencies
          npx -y playwright@${{ steps.playwright-version.outputs.version }} install chromium --with-deps
          
          # Save installed dependencies list for caching
          mkdir -p ~/playwright-deps
          dpkg -l > ~/playwright-deps/installed-packages.txt
          
          echo "âœ… Playwright browsers and dependencies installed"
        else
          echo "ðŸš€ Using cached Playwright browsers"
          
          # Just ensure system dependencies are present (fast operation)
          # This handles cases where the runner image has changed
          npx -y playwright@${{ steps.playwright-version.outputs.version }} install-deps chromium || true
        fi
        
    - name: Run visual tests
      shell: bash
      run: |
        node ${{ github.action_path }}/dist/index.js
      env:
        INPUT_PREVIEW-URL: ${{ inputs.preview-url }}
        INPUT_GITHUB-TOKEN: ${{ inputs.github-token }}
        INPUT_CLAUDE-API-KEY: ${{ inputs.claude-api-key }}
        INPUT_STORAGE-PROVIDER: ${{ inputs.storage-provider }}
        INPUT_FIREBASE-CREDENTIALS: ${{ inputs.firebase-credentials }}
        INPUT_STORAGE-BUCKET: ${{ inputs.storage-bucket }}
        INPUT_S3-BUCKET: ${{ inputs.s3-bucket }}
        INPUT_AWS-REGION: ${{ inputs.aws-region }}
        INPUT_AWS-ACCESS-KEY-ID: ${{ inputs.aws-access-key-id }}
        INPUT_AWS-SECRET-ACCESS-KEY: ${{ inputs.aws-secret-access-key }}
        INPUT_REDIS-URL: ${{ inputs.redis-url }}
        INPUT_CACHE-TTL: ${{ inputs.cache-ttl }}
        INPUT_FIREBASE-PROJECT-ID: ${{ inputs.firebase-project-id }}
        INPUT_FIREBASE-TARGET: ${{ inputs.firebase-target }}
        INPUT_BUILD-SYSTEM: ${{ inputs.build-system }}
        INPUT_TEST-TIMEOUT: ${{ inputs.test-timeout }}
        INPUT_CLEANUP-DAYS: ${{ inputs.cleanup-days }}
        INPUT_VIEWPORTS: ${{ inputs.viewports }}
        INPUT_MAX-ROUTES: ${{ inputs.max-routes }}
        INPUT_AUTH-EMAIL: ${{ inputs.auth-email }}
        INPUT_AUTH-PASSWORD: ${{ inputs.auth-password }}
        INPUT_AUTH-LOGIN-URL: ${{ inputs.auth-login-url }}