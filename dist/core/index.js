"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = exports.getStats = exports.move = exports.copy = exports.listDirectory = exports.ensureDirectory = exports.deleteFile = exports.write = exports.read = exports.exists = exports.FileSystem = exports.TypeGuards = exports.mergeJSON = exports.jsonClone = exports.safeJSONStringify = exports.parseJSONAs = exports.safeJSONParse = exports.getJSONConfig = exports.getArrayConfig = exports.getNumberConfig = exports.getBooleanConfig = exports.getSecretConfig = exports.getOptionalConfig = exports.getRequiredConfig = exports.config = exports.ConfigurationManager = exports.withCircuitBreaker = exports.WithCircuitBreaker = exports.CircuitState = exports.CircuitBreakerFactory = exports.CircuitBreakerError = exports.CircuitBreaker = exports.executeParallel = exports.retryOperation = exports.ConfigPattern = exports.BotOperations = exports.GitHubOperations = exports.executeOperation = exports.wrapAsync = exports.createTryCatch = exports.createModuleLogger = exports.botActivity = exports.BotActivityHandler = exports.ErrorCategory = exports.ErrorSeverity = exports.YoFixError = exports.errorHandler = exports.CentralizedErrorHandler = exports.getGitHubCommentEngine = exports.GitHubCommentEngine = void 0;
exports.raceWithCleanup = exports.allSettled = exports.parseTimeout = exports.createDeferred = exports.concurrent = exports.debounce = exports.throttle = exports.retryWithBackoff = exports.sleep = exports.delay = exports.withTimeout = exports.createValidator = exports.isValid = exports.validate = exports.FormValidator = exports.ValidationBuilder = exports.Validators = exports.cleanupOldFiles = exports.createTempFile = void 0;
exports.initializeCoreServices = initializeCoreServices;
exports.finalizeCoreServices = finalizeCoreServices;
var GitHubCommentEngine_1 = require("./github/GitHubCommentEngine");
Object.defineProperty(exports, "GitHubCommentEngine", { enumerable: true, get: function () { return GitHubCommentEngine_1.GitHubCommentEngine; } });
Object.defineProperty(exports, "getGitHubCommentEngine", { enumerable: true, get: function () { return GitHubCommentEngine_1.getGitHubCommentEngine; } });
var CentralizedErrorHandler_1 = require("./error/CentralizedErrorHandler");
Object.defineProperty(exports, "CentralizedErrorHandler", { enumerable: true, get: function () { return CentralizedErrorHandler_1.CentralizedErrorHandler; } });
Object.defineProperty(exports, "errorHandler", { enumerable: true, get: function () { return CentralizedErrorHandler_1.errorHandler; } });
Object.defineProperty(exports, "YoFixError", { enumerable: true, get: function () { return CentralizedErrorHandler_1.YoFixError; } });
Object.defineProperty(exports, "ErrorSeverity", { enumerable: true, get: function () { return CentralizedErrorHandler_1.ErrorSeverity; } });
Object.defineProperty(exports, "ErrorCategory", { enumerable: true, get: function () { return CentralizedErrorHandler_1.ErrorCategory; } });
var BotActivityHandler_1 = require("./bot/BotActivityHandler");
Object.defineProperty(exports, "BotActivityHandler", { enumerable: true, get: function () { return BotActivityHandler_1.BotActivityHandler; } });
Object.defineProperty(exports, "botActivity", { enumerable: true, get: function () { return BotActivityHandler_1.botActivity; } });
var ErrorHandlerFactory_1 = require("./error/ErrorHandlerFactory");
Object.defineProperty(exports, "createModuleLogger", { enumerable: true, get: function () { return ErrorHandlerFactory_1.createModuleLogger; } });
Object.defineProperty(exports, "createTryCatch", { enumerable: true, get: function () { return ErrorHandlerFactory_1.createTryCatch; } });
Object.defineProperty(exports, "wrapAsync", { enumerable: true, get: function () { return ErrorHandlerFactory_1.wrapAsync; } });
var ConsistencyPatterns_1 = require("./patterns/ConsistencyPatterns");
Object.defineProperty(exports, "executeOperation", { enumerable: true, get: function () { return ConsistencyPatterns_1.executeOperation; } });
Object.defineProperty(exports, "GitHubOperations", { enumerable: true, get: function () { return ConsistencyPatterns_1.GitHubOperations; } });
Object.defineProperty(exports, "BotOperations", { enumerable: true, get: function () { return ConsistencyPatterns_1.BotOperations; } });
Object.defineProperty(exports, "ConfigPattern", { enumerable: true, get: function () { return ConsistencyPatterns_1.ConfigPattern; } });
Object.defineProperty(exports, "retryOperation", { enumerable: true, get: function () { return ConsistencyPatterns_1.retryOperation; } });
Object.defineProperty(exports, "executeParallel", { enumerable: true, get: function () { return ConsistencyPatterns_1.executeParallel; } });
var CircuitBreaker_1 = require("./patterns/CircuitBreaker");
Object.defineProperty(exports, "CircuitBreaker", { enumerable: true, get: function () { return CircuitBreaker_1.CircuitBreaker; } });
Object.defineProperty(exports, "CircuitBreakerError", { enumerable: true, get: function () { return CircuitBreaker_1.CircuitBreakerError; } });
Object.defineProperty(exports, "CircuitBreakerFactory", { enumerable: true, get: function () { return CircuitBreaker_1.CircuitBreakerFactory; } });
Object.defineProperty(exports, "CircuitState", { enumerable: true, get: function () { return CircuitBreaker_1.CircuitState; } });
Object.defineProperty(exports, "WithCircuitBreaker", { enumerable: true, get: function () { return CircuitBreaker_1.WithCircuitBreaker; } });
Object.defineProperty(exports, "withCircuitBreaker", { enumerable: true, get: function () { return CircuitBreaker_1.withCircuitBreaker; } });
var ConfigurationManager_1 = require("./config/ConfigurationManager");
Object.defineProperty(exports, "ConfigurationManager", { enumerable: true, get: function () { return ConfigurationManager_1.ConfigurationManager; } });
Object.defineProperty(exports, "config", { enumerable: true, get: function () { return ConfigurationManager_1.config; } });
Object.defineProperty(exports, "getRequiredConfig", { enumerable: true, get: function () { return ConfigurationManager_1.getRequiredConfig; } });
Object.defineProperty(exports, "getOptionalConfig", { enumerable: true, get: function () { return ConfigurationManager_1.getOptionalConfig; } });
Object.defineProperty(exports, "getSecretConfig", { enumerable: true, get: function () { return ConfigurationManager_1.getSecretConfig; } });
Object.defineProperty(exports, "getBooleanConfig", { enumerable: true, get: function () { return ConfigurationManager_1.getBooleanConfig; } });
Object.defineProperty(exports, "getNumberConfig", { enumerable: true, get: function () { return ConfigurationManager_1.getNumberConfig; } });
Object.defineProperty(exports, "getArrayConfig", { enumerable: true, get: function () { return ConfigurationManager_1.getArrayConfig; } });
Object.defineProperty(exports, "getJSONConfig", { enumerable: true, get: function () { return ConfigurationManager_1.getJSONConfig; } });
var JSONParser_1 = require("./utils/JSONParser");
Object.defineProperty(exports, "safeJSONParse", { enumerable: true, get: function () { return JSONParser_1.safeJSONParse; } });
Object.defineProperty(exports, "parseJSONAs", { enumerable: true, get: function () { return JSONParser_1.parseJSONAs; } });
Object.defineProperty(exports, "safeJSONStringify", { enumerable: true, get: function () { return JSONParser_1.safeJSONStringify; } });
Object.defineProperty(exports, "jsonClone", { enumerable: true, get: function () { return JSONParser_1.jsonClone; } });
Object.defineProperty(exports, "mergeJSON", { enumerable: true, get: function () { return JSONParser_1.mergeJSON; } });
Object.defineProperty(exports, "TypeGuards", { enumerable: true, get: function () { return JSONParser_1.TypeGuards; } });
var FileSystemWrapper_1 = require("./utils/FileSystemWrapper");
Object.defineProperty(exports, "FileSystem", { enumerable: true, get: function () { return FileSystemWrapper_1.FileSystem; } });
Object.defineProperty(exports, "exists", { enumerable: true, get: function () { return FileSystemWrapper_1.exists; } });
Object.defineProperty(exports, "read", { enumerable: true, get: function () { return FileSystemWrapper_1.read; } });
Object.defineProperty(exports, "write", { enumerable: true, get: function () { return FileSystemWrapper_1.write; } });
Object.defineProperty(exports, "deleteFile", { enumerable: true, get: function () { return FileSystemWrapper_1.deleteFile; } });
Object.defineProperty(exports, "ensureDirectory", { enumerable: true, get: function () { return FileSystemWrapper_1.ensureDirectory; } });
Object.defineProperty(exports, "listDirectory", { enumerable: true, get: function () { return FileSystemWrapper_1.listDirectory; } });
Object.defineProperty(exports, "copy", { enumerable: true, get: function () { return FileSystemWrapper_1.copy; } });
Object.defineProperty(exports, "move", { enumerable: true, get: function () { return FileSystemWrapper_1.move; } });
Object.defineProperty(exports, "getStats", { enumerable: true, get: function () { return FileSystemWrapper_1.getStats; } });
Object.defineProperty(exports, "watch", { enumerable: true, get: function () { return FileSystemWrapper_1.watch; } });
Object.defineProperty(exports, "createTempFile", { enumerable: true, get: function () { return FileSystemWrapper_1.createTempFile; } });
Object.defineProperty(exports, "cleanupOldFiles", { enumerable: true, get: function () { return FileSystemWrapper_1.cleanupOldFiles; } });
var ValidationPatterns_1 = require("./utils/ValidationPatterns");
Object.defineProperty(exports, "Validators", { enumerable: true, get: function () { return ValidationPatterns_1.Validators; } });
Object.defineProperty(exports, "ValidationBuilder", { enumerable: true, get: function () { return ValidationPatterns_1.ValidationBuilder; } });
Object.defineProperty(exports, "FormValidator", { enumerable: true, get: function () { return ValidationPatterns_1.FormValidator; } });
Object.defineProperty(exports, "validate", { enumerable: true, get: function () { return ValidationPatterns_1.validate; } });
Object.defineProperty(exports, "isValid", { enumerable: true, get: function () { return ValidationPatterns_1.isValid; } });
Object.defineProperty(exports, "createValidator", { enumerable: true, get: function () { return ValidationPatterns_1.createValidator; } });
var AsyncUtilities_1 = require("./utils/AsyncUtilities");
Object.defineProperty(exports, "withTimeout", { enumerable: true, get: function () { return AsyncUtilities_1.withTimeout; } });
Object.defineProperty(exports, "delay", { enumerable: true, get: function () { return AsyncUtilities_1.delay; } });
Object.defineProperty(exports, "sleep", { enumerable: true, get: function () { return AsyncUtilities_1.sleep; } });
Object.defineProperty(exports, "retryWithBackoff", { enumerable: true, get: function () { return AsyncUtilities_1.retryWithBackoff; } });
Object.defineProperty(exports, "throttle", { enumerable: true, get: function () { return AsyncUtilities_1.throttle; } });
Object.defineProperty(exports, "debounce", { enumerable: true, get: function () { return AsyncUtilities_1.debounce; } });
Object.defineProperty(exports, "concurrent", { enumerable: true, get: function () { return AsyncUtilities_1.concurrent; } });
Object.defineProperty(exports, "createDeferred", { enumerable: true, get: function () { return AsyncUtilities_1.createDeferred; } });
Object.defineProperty(exports, "parseTimeout", { enumerable: true, get: function () { return AsyncUtilities_1.parseTimeout; } });
Object.defineProperty(exports, "allSettled", { enumerable: true, get: function () { return AsyncUtilities_1.allSettled; } });
Object.defineProperty(exports, "raceWithCleanup", { enumerable: true, get: function () { return AsyncUtilities_1.raceWithCleanup; } });
const CentralizedErrorHandler_2 = require("./error/CentralizedErrorHandler");
const GitHubCommentEngine_2 = require("./github/GitHubCommentEngine");
function initializeCoreServices(githubToken) {
    CentralizedErrorHandler_2.errorHandler.initialize(githubToken);
    (0, GitHubCommentEngine_2.getGitHubCommentEngine)(githubToken);
    console.log('✅ YoFix core services initialized');
}
async function finalizeCoreServices() {
    await CentralizedErrorHandler_2.errorHandler.postErrorSummary();
    CentralizedErrorHandler_2.errorHandler.reset();
}
