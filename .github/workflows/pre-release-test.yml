name: Pre-Release Testing
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., v1.0.13)'
        required: true
      release-type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  # Create test branch and PR
  create-test-pr:
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.create-pr.outputs.pr-number }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create test branch
        run: |
          git config user.name "YoFix Bot"
          git config user.email "bot@yofix.dev"
          git checkout -b test-release-${{ github.event.inputs.version }}
          
          # Make a small change to trigger PR
          echo "# Test Release ${{ github.event.inputs.version }}" >> TEST_RELEASE.md
          echo "Testing version: ${{ github.event.inputs.version }}" >> TEST_RELEASE.md
          echo "Date: $(date)" >> TEST_RELEASE.md
          
          git add TEST_RELEASE.md
          git commit -m "test: pre-release test for ${{ github.event.inputs.version }}"
          git push origin test-release-${{ github.event.inputs.version }}
      
      - name: Create PR
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Test Release ${context.payload.inputs.version}`,
              body: `## Pre-Release Test
              
              Testing YoFix before releasing ${context.payload.inputs.version}
              
              ### Test Checklist
              - [ ] Basic functionality works
              - [ ] PR comments are posted
              - [ ] Authentication works
              - [ ] AI features work
              - [ ] Error handling works
              - [ ] Screenshots are uploaded
              
              This PR will be automatically closed after testing.`,
              head: `test-release-${context.payload.inputs.version}`,
              base: 'main'
            });
            
            core.setOutput('pr-number', pr.data.number);
            console.log(`Created test PR #${pr.data.number}`);

  # Test the action on the PR
  test-on-pr:
    needs: create-test-pr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: test-release-${{ github.event.inputs.version }}
      
      - name: Build action
        run: |
          npm ci
          npm run build
      
      # Deploy a test app
      - name: Create test app
        run: |
          mkdir -p test-app
          cat > test-app/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>YoFix Pre-Release Test</title>
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .header { background: #333; color: white; padding: 20px; text-align: center; }
                  .content { padding: 20px; }
                  .responsive-test { 
                      background: #f0f0f0; 
                      padding: 20px; 
                      margin: 20px 0;
                  }
                  @media (max-width: 768px) {
                      .responsive-test { 
                          background: #e0e0e0; 
                          font-size: 14px;
                      }
                  }
                  .button { 
                      background: #007bff; 
                      color: white; 
                      padding: 10px 20px; 
                      border: none; 
                      cursor: pointer;
                  }
                  .button:hover { background: #0056b3; }
                  .login-form { 
                      max-width: 400px; 
                      margin: 40px auto; 
                      padding: 20px; 
                      border: 1px solid #ddd;
                  }
                  .form-group { margin-bottom: 15px; }
                  .form-group label { display: block; margin-bottom: 5px; }
                  .form-group input { 
                      width: 100%; 
                      padding: 8px; 
                      border: 1px solid #ddd;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>YoFix Test App v${{ github.event.inputs.version }}</h1>
              </div>
              <div class="container">
                  <div class="content">
                      <h2>Visual Testing Elements</h2>
                      
                      <div class="responsive-test">
                          <h3>Responsive Design Test</h3>
                          <p>This section changes appearance on mobile devices.</p>
                          <button class="button" id="test-button">Click Me</button>
                      </div>
                      
                      <div class="login-form">
                          <h3>Login Form</h3>
                          <form id="login-form">
                              <div class="form-group">
                                  <label for="email">Email</label>
                                  <input type="email" id="email" name="email" placeholder="test@example.com">
                              </div>
                              <div class="form-group">
                                  <label for="password">Password</label>
                                  <input type="password" id="password" name="password" placeholder="password">
                              </div>
                              <button type="submit" class="button">Login</button>
                          </form>
                      </div>
                  </div>
              </div>
          </body>
          </html>
          EOF
      
      - name: Deploy test app
        id: deploy
        run: |
          # Use surge.sh for quick deployment
          npm install -g surge
          surge ./test-app --domain yofix-prerelease-${{ github.run_id }}.surge.sh
          echo "preview-url=https://yofix-prerelease-${{ github.run_id }}.surge.sh" >> $GITHUB_OUTPUT
      
      # Test YoFix on the PR
      - name: Test YoFix Action
        uses: ./
        id: yofix-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          preview-url: ${{ steps.deploy.outputs.preview-url }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          claude-api-key: ${{ secrets.CLAUDE_API_KEY }}
          firebase-credentials: ${{ secrets.TEST_FIREBASE_CREDENTIALS }}
          storage-bucket: 'yofix-test-screenshots'
          # Test various features
          viewports: '1920x1080,768x1024,375x667'
          enable-smart-auth: 'true'
          auth-email: 'test@example.com'
          auth-password: 'password123'
          enable-ai-navigation: 'true'
          routes: 'auto'

  # Verify test results
  verify-results:
    needs: [create-test-pr, test-on-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            // Wait a bit for comment to be posted
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.create-test-pr.outputs.pr-number }}
            });
            
            const yofixComment = comments.data.find(c => 
              c.body?.includes('Runtime PR Verification') || 
              c.body?.includes('Visual Testing Results')
            );
            
            if (!yofixComment) {
              core.setFailed('❌ No YoFix comment found on test PR');
            } else {
              console.log('✅ YoFix comment posted successfully');
              
              // Check comment content
              const hasScreenshots = yofixComment.body.includes('Screenshots');
              const hasTestResults = yofixComment.body.includes('Test Results');
              const hasStatus = yofixComment.body.includes('Status');
              
              console.log(`✅ Has screenshots: ${hasScreenshots}`);
              console.log(`✅ Has test results: ${hasTestResults}`);
              console.log(`✅ Has status: ${hasStatus}`);
              
              if (!hasScreenshots || !hasTestResults || !hasStatus) {
                core.setFailed('❌ Comment is missing expected content');
              }
            }
      
      - name: Cleanup Test PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Close the test PR
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.create-test-pr.outputs.pr-number }},
              state: 'closed'
            });
            
            // Delete the test branch
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/test-release-${{ github.event.inputs.version }}`
            });
            
            console.log('✅ Test PR and branch cleaned up');

  # If all tests pass, prepare for release
  prepare-release:
    needs: verify-results
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install and Build
        run: |
          npm ci
          npm run build
      
      - name: Create Release Summary
        run: |
          echo "# Release Ready: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All pre-release tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Features Tested:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Basic visual testing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PR comment posting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smart authentication" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ AI navigation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-viewport testing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Screenshot uploads" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the test results above" >> $GITHUB_STEP_SUMMARY
          echo "2. If everything looks good, run:" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   npm version ${{ github.event.inputs.release-type }}" >> $GITHUB_STEP_SUMMARY
          echo "   git push --tags" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "3. The release workflow will automatically publish to marketplace" >> $GITHUB_STEP_SUMMARY
      
      - name: Notify Success
        run: |
          echo "✅ Pre-release testing completed successfully!"
          echo "Version ${{ github.event.inputs.version }} is ready for release."