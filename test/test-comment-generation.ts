#!/usr/bin/env ts-node
/**
 * Test PR comment generation directly
 */

import { VerificationResult, Screenshot } from '../src/types';

// Extract just the comment generation logic from PRReporter for testing
function generateCommentBody(result: VerificationResult, storageConsoleUrl?: string): string {
  const statusEmoji = result.status === 'success' ? '✅' : result.status === 'partial' ? '⚠️' : '❌';
  const firebaseEmoji = '🔥';
  const reactEmoji = '⚛️';
  
  // Header with overall status
  let comment = `## ${statusEmoji} Runtime PR Verification - React SPA\n\n`;
  comment += `**Status**: ${result.status.charAt(0).toUpperCase() + result.status.slice(1)} | `;
  comment += `${reactEmoji} React ${result.firebaseConfig.buildSystem === 'vite' ? 'Vite' : 'CRA'} | `;
  comment += `${firebaseEmoji} Firebase ${result.firebaseConfig.target}\n\n`;

  // Test summary
  comment += `**Test Results**: ${result.passedTests}/${result.totalTests} passed`;
  if (result.failedTests > 0) {
    comment += ` • ${result.failedTests} failed`;
  }
  if (result.skippedTests > 0) {
    comment += ` • ${result.skippedTests} skipped`;
  }
  comment += ` • ${formatDuration(result.duration)}\n\n`;

  // Quick access links
  const screenshots = result.testResults.flatMap(t => t.screenshots);
  const videos = result.testResults.flatMap(t => t.videos);
  
  if (screenshots.length > 0 || videos.length > 0) {
    comment += `**Visual Evidence**: `;
    comment += `📸 ${screenshots.length} screenshot${screenshots.length !== 1 ? 's' : ''}`;
    if (videos.length > 0) {
      comment += ` • 🎥 ${videos.length} video${videos.length !== 1 ? 's' : ''}`;
    }
    if (storageConsoleUrl) {
      comment += ` • [Firebase Console](${storageConsoleUrl})`;
    }
    comment += '\n\n';
  }

  // Embed screenshots directly
  if (screenshots.length > 0) {
    console.log(`🖼️  Embedding ${screenshots.length} screenshots in PR comment`);
    const screenshotsWithUrls = screenshots.filter(s => s.firebaseUrl);
    console.log(`📸 Screenshots with Firebase URLs: ${screenshotsWithUrls.length}`);
    
    comment += generateEmbeddedScreenshots(screenshots);
  }

  // Expandable details section
  comment += '<details>\n<summary><strong>View Detailed Results</strong></summary>\n\n';

  // Components and routes verified
  if (result.summary?.componentsVerified?.length > 0 || result.summary?.routesTested?.length > 0) {
    comment += '### ✅ React App Verification\n\n';
    
    if (result.summary.componentsVerified.length > 0) {
      comment += `**Components Tested**: ${result.summary.componentsVerified.join(', ')}\n\n`;
    }
    
    if (result.summary.routesTested.length > 0) {
      comment += `**Routes Verified**: ${result.summary.routesTested.join(', ')}\n\n`;
    }
  }

  comment += '</details>\n\n';

  // Footer
  const timestamp = new Date().toLocaleString();
  comment += `---\n*Generated by [YoFix](https://github.com/yofix/yofix) • ${timestamp}*`;

  return comment;
}

function formatDuration(durationMs: number): string {
  if (durationMs < 1000) {
    return `${durationMs}ms`;
  } else if (durationMs < 60000) {
    return `${(durationMs / 1000).toFixed(1)}s`;
  } else {
    const minutes = Math.floor(durationMs / 60000);
    const seconds = ((durationMs % 60000) / 1000).toFixed(0);
    return `${minutes}m ${seconds}s`;
  }
}

function generateEmbeddedScreenshots(screenshots: Screenshot[]): string {
  if (screenshots.length === 0) {
    return '';
  }

  let gallery = '### 📸 Screenshots\n\n';
  
  // Group screenshots by test/route name (remove viewport info)
  const groupedByRoute = screenshots.reduce((acc, screenshot) => {
    // Extract route from screenshot name by removing viewport dimensions
    let route = screenshot.name;
    // Remove viewport size pattern (e.g., -1920x1080)
    route = route.replace(/-\d+x\d+$/, '');
    // Clean up the route name
    route = route.replace(/^\//, '').replace(/-/g, ' ');
    
    if (!acc[route]) {
      acc[route] = [];
    }
    acc[route].push(screenshot);
    return acc;
  }, {} as Record<string, Screenshot[]>);

  console.log(`📂 Grouped into ${Object.keys(groupedByRoute).length} routes:`, Object.keys(groupedByRoute));

  // Generate gallery for each route
  for (const [route, routeScreenshots] of Object.entries(groupedByRoute)) {
    gallery += `#### Route: \`${route}\`\n\n`;
    
    // Only show images if they have Firebase URLs
    const screenshotsWithUrls = routeScreenshots.filter(s => s.firebaseUrl);
    
    if (screenshotsWithUrls.length === 0) {
      gallery += `_Screenshots captured but URLs not available_\n\n`;
      continue;
    }
    
    // Create a table for viewports
    gallery += '<table>\n<tr>\n';
    
    // Sort by viewport size (desktop, tablet, mobile)
    const sorted = screenshotsWithUrls.sort((a, b) => b.viewport.width - a.viewport.width);
    
    for (const screenshot of sorted) {
      gallery += `<td align="center">\n`;
      gallery += `<strong>${screenshot.viewport.name}</strong><br>\n`;
      gallery += `${screenshot.viewport.width}×${screenshot.viewport.height}<br>\n`;
      gallery += `<img src="${screenshot.firebaseUrl}" width="300" alt="${screenshot.name}" />\n`;
      gallery += `</td>\n`;
    }
    
    gallery += '</tr>\n</table>\n\n';
  }

  return gallery;
}

// Test data matching the user's actual scenario
const mockScreenshots: Screenshot[] = [
  {
    name: 'home-page-1920x1080',
    path: '/tmp/home-page-1920x1080.png',
    viewport: { name: 'Desktop', width: 1920, height: 1080 },
    timestamp: Date.now(),
    firebaseUrl: 'https://storage.googleapis.com/frontend-qa/screenshots/pr-3131/home-page-1920x1080.png'
  },
  {
    name: 'home-page-768x1024',
    path: '/tmp/home-page-768x1024.png',
    viewport: { name: 'Tablet', width: 768, height: 1024 },
    timestamp: Date.now(),
    firebaseUrl: 'https://storage.googleapis.com/frontend-qa/screenshots/pr-3131/home-page-768x1024.png'
  },
  {
    name: 'home-page-375x667',
    path: '/tmp/home-page-375x667.png',
    viewport: { name: 'Mobile', width: 375, height: 667 },
    timestamp: Date.now(),
    firebaseUrl: 'https://storage.googleapis.com/frontend-qa/screenshots/pr-3131/home-page-375x667.png'
  },
  {
    name: 'dashboard-1920x1080',
    path: '/tmp/dashboard-1920x1080.png',
    viewport: { name: 'Desktop', width: 1920, height: 1080 },
    timestamp: Date.now(),
    firebaseUrl: 'https://storage.googleapis.com/frontend-qa/screenshots/pr-3131/dashboard-1920x1080.png'
  },
  {
    name: 'dashboard-768x1024',
    path: '/tmp/dashboard-768x1024.png',
    viewport: { name: 'Tablet', width: 768, height: 1024 },
    timestamp: Date.now(),
    firebaseUrl: 'https://storage.googleapis.com/frontend-qa/screenshots/pr-3131/dashboard-768x1024.png'
  }
];

// Mock verification result
const mockResult: VerificationResult = {
  status: 'partial',
  totalTests: 2,
  passedTests: 1,
  failedTests: 1,
  skippedTests: 0,
  duration: 35200,
  testResults: [
    {
      testId: 'test-1',
      testName: 'Home Page - Visual Regression',
      status: 'passed',
      duration: 12300,
      errors: [],
      screenshots: mockScreenshots.filter(s => s.name.startsWith('home-page')),
      videos: [],
      consoleMessages: []
    },
    {
      testId: 'test-2',
      testName: 'Dashboard - Component Loading',
      status: 'failed',
      duration: 22900,
      errors: ['TimeoutError: Element not found within 10000ms'],
      screenshots: mockScreenshots.filter(s => s.name.startsWith('dashboard')),
      videos: [],
      consoleMessages: []
    }
  ],
  screenshotsUrl: 'https://storage.googleapis.com/frontend-qa/screenshots/pr-3131',
  firebaseConfig: {
    projectId: 'arboreal-vision-339901',
    target: 'default',
    buildSystem: 'react',
    previewUrl: 'https://arboreal-vision-339901--pr-3131-92ely4j9.web.app'
  },
  summary: {
    componentsVerified: ['HomePage', 'Navigation', 'Dashboard'],
    routesTested: ['/home', '/dashboard'],
    issuesFound: ['Dashboard component failed to load within timeout']
  }
};

console.log('🧪 Testing PR Comment Generation with Embedded Screenshots\n');

const comment = generateCommentBody(mockResult, 'https://console.firebase.google.com/u/0/project/arboreal-vision-339901/storage');

console.log('\n📄 Generated PR Comment:');
console.log('=' .repeat(80));
console.log(comment);
console.log('=' .repeat(80));

// Validation
const hasImages = comment.includes('<img src=');
const hasTable = comment.includes('<table>');
const imgCount = (comment.match(/<img /g) || []).length;
const tableCount = (comment.match(/<table>/g) || []).length;

console.log('\n✅ Validation Results:');
console.log(`   - Contains <img> tags: ${hasImages ? '✓' : '✗'}`);
console.log(`   - Contains <table> layout: ${hasTable ? '✓' : '✗'}`);
console.log(`   - Number of images: ${imgCount} (expected: 5)`);
console.log(`   - Number of tables: ${tableCount} (expected: 2)`);
console.log(`   - Screenshots embedded: ${hasImages && hasTable ? 'YES ✓' : 'NO ✗'}`);

// Extract route names to verify
console.log('\n📋 Routes Detected:');
const routeMatches = comment.match(/#### Route: `([^`]+)`/g);
if (routeMatches) {
  routeMatches.forEach(match => {
    const route = match.replace(/#### Route: `/, '').replace(/`/, '');
    console.log(`   - ${route}`);
  });
}