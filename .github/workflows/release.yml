name: Release GitHub Action

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all tags

      - name: Calculate version
        id: version
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix and split version
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Increment based on version type
          case "${{ github.event.inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-optional

      # Skip tests for now - no test files
      # - name: Run tests
      #   run: npm test

      - name: Build action
        run: npm run build
        
      - name: Commit dist changes
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git add -f dist/
          VERSION=${{ steps.version.outputs.version || github.ref_name }}
          git commit -m "Build dist for release $VERSION" || echo "No changes to commit"

      - name: Create and push tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION=${{ steps.version.outputs.version }}
          git tag $VERSION
          git push origin $VERSION

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version || github.ref_name }}
          
          # Check if release already exists
          if gh release view $VERSION &>/dev/null; then
            echo "Release $VERSION already exists, skipping creation"
          else
            # Create release using GitHub CLI
            gh release create $VERSION \
              --title "Release $VERSION" \
              --notes "## YoFix $VERSION
          
          AI-powered visual testing for web applications.
          
          ### What's Changed
          - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details
          
          ### Installation
          \`\`\`yaml
          - uses: ${{ github.repository }}@$VERSION
          \`\`\`" \
              --latest
          fi

      # Update major version tag (e.g., v1 -> v1.2.3)
      - name: Update major version tag
        if: startsWith(steps.version.outputs.version || github.ref_name, 'v')
        run: |
          VERSION=${{ steps.version.outputs.version || github.ref_name }}
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
          
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Force update the major version tag
          git tag -fa $MAJOR_VERSION -m "Update $MAJOR_VERSION to $VERSION"
          git push origin $MAJOR_VERSION --force
          
      # The action is automatically published to GitHub Marketplace
      # when a release is created with proper action.yml metadata