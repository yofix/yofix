name: 'yofix'
description: 'AI-powered visual issue detection and auto-fix for web applications'
author: 'YoFix'

branding:
  icon: 'activity'
  color: 'purple'

inputs:
  preview-url:
    description: 'Firebase preview URL (e.g., https://project--pr-123-app.web.app)'
    required: true
  
  github-token:
    description: 'GitHub token for posting PR comments'
    required: true
  
  claude-api-key:
    description: 'Claude API key for intelligent route analysis'
    required: true
  
  # Storage Configuration
  storage-provider:
    description: 'Storage provider: firebase, s3, or github'
    required: false
    default: 'firebase'
  
  # Firebase Storage
  firebase-credentials:
    description: 'Base64 encoded Firebase service account JSON'
    required: false
  
  storage-bucket:
    description: 'Firebase Storage bucket name'
    required: false
  
  # S3 Storage
  s3-bucket:
    description: 'AWS S3 bucket name'
    required: false
  
  aws-region:
    description: 'AWS region for S3 bucket'
    required: false
    default: 'us-east-1'
  
  aws-access-key-id:
    description: 'AWS access key ID (uses default credentials if not provided)'
    required: false
  
  aws-secret-access-key:
    description: 'AWS secret access key (uses default credentials if not provided)'
    required: false
  
  # Cache Configuration
  redis-url:
    description: 'Redis URL for caching (format: redis://user:pass@host:port)'
    required: false
  
  cache-ttl:
    description: 'Cache TTL in seconds'
    required: false
    default: '3600'
  
  # MCP Configuration
  mcp-provider:
    description: 'MCP provider: built-in or playwright-official'
    required: false
    default: 'built-in'
  
  mcp-options:
    description: 'JSON string of MCP options'
    required: false
    default: '{}'
  
  firebase-target:
    description: 'Firebase hosting target (auto-detected from preview URL if not provided)'
    required: false
  
  build-system:
    description: 'Build system: vite or react (auto-detected from output folder if not provided)'
    required: false
    default: ''
  
  test-timeout:
    description: 'Maximum time for tests to run (e.g., 5m, 300s)'
    required: false
    default: '5m'
  
  cleanup-days:
    description: 'Days to keep old screenshots before cleanup'
    required: false
    default: '30'
  
  viewports:
    description: 'Comma-separated viewport sizes (e.g., 1920x1080,768x1024,375x667)'
    required: false
    default: '1920x1080,768x1024,375x667'
  
  max-routes:
    description: 'Maximum number of routes to test'
    required: false
    default: '10'
  
  auth-email:
    description: 'Email for authentication (if app requires login)'
    required: false
  
  auth-password:
    description: 'Password for authentication (if app requires login)'
    required: false
  
  auth-login-url:
    description: 'Login page URL path'
    required: false
    default: '/login/password'
  
  auth-mode:
    description: 'Authentication mode: llm (AI-powered), selectors, or smart'
    required: false
    default: 'llm'
  
  enable-smart-auth:
    description: 'Enable AI-powered smart authentication'
    required: false
    default: 'false'
  
  enable-ai-navigation:
    description: 'Enable AI-powered navigation and route discovery'
    required: false
    default: 'false'
  
  enable-ai-test-generation:
    description: 'Enable AI to generate context-aware tests dynamically'
    required: false
    default: 'false'
  
  test-routes:
    description: 'Comma-separated list of specific routes to test'
    required: false
    default: ''
  
  session-mode:
    description: 'Browser session mode: sharedAgent (reuse session) or independentAgent (new session per route)'
    required: false
    default: 'sharedAgent'
  
  clear-cache:
    description: 'Clear route analysis cache before running'
    required: false
    default: 'false'

outputs:
  status:
    description: 'Test execution status'
  
  summary-url:
    description: 'URL to the test results summary'
  
  firebase-target:
    description: 'Detected Firebase hosting target'
  
  build-system:
    description: 'Detected build system'

runs:
  using: 'composite'
  steps:
    # Step 1: Initialize YoFix
    - name: 🚀 Initialize YoFix Visual Testing
      shell: bash
      run: |
        echo "::group::YoFix Initialization"
        echo "YoFix Version: v1.0.20"
        echo "Preview URL: ${{ inputs.preview-url }}"
        echo "Storage Provider: ${{ inputs.storage-provider }}"
        echo "Test Timeout: ${{ inputs.test-timeout }}"
        echo "Viewports: ${{ inputs.viewports }}"
        echo "Max Routes: ${{ inputs.max-routes }}"
        echo "::endgroup::"
    
    # Step 2: Validate Configuration
    - name: ✅ Validate Configuration
      shell: bash
      run: |
        echo "::group::Configuration Validation"
        # Check required inputs
        if [ -z "${{ inputs.preview-url }}" ]; then
          echo "❌ Error: preview-url is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.github-token }}" ]; then
          echo "❌ Error: github-token is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.claude-api-key }}" ]; then
          echo "❌ Error: claude-api-key is required"
          exit 1
        fi
        
        # Validate storage configuration
        if [ "${{ inputs.storage-provider }}" = "firebase" ]; then
          if [ -z "${{ inputs.firebase-credentials }}" ] || [ -z "${{ inputs.storage-bucket }}" ]; then
            echo "⚠️ Warning: Firebase storage configuration incomplete"
          else
            echo "✅ Firebase storage configuration validated"
          fi
        fi
        
        if [ "${{ inputs.storage-provider }}" = "s3" ]; then
          if [ -z "${{ inputs.s3-bucket }}" ]; then
            echo "❌ Error: s3-bucket is required for S3 storage"
            exit 1
          fi
          echo "✅ S3 storage configuration validated"
        fi
        
        echo "✅ All required configurations validated"
        echo "::endgroup::"
    
    # Step 3: Get Playwright version
    - name: 🎭 Determine Playwright Version
      id: playwright-version
      shell: bash
      run: |
        echo "::group::Playwright Version Detection"
        # Default Playwright version
        echo "version=1.54.1" >> $GITHUB_OUTPUT
        echo "Playwright version: 1.54.1"
        echo "::endgroup::"
    
    # Step 4: Cache Playwright browsers
    - name: 📦 Cache Playwright Browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
          ~/playwright-deps
        key: playwright-browsers-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-v2
        restore-keys: |
          playwright-browsers-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-
          playwright-browsers-${{ runner.os }}-
    
    # Step 5: Setup Playwright
    - name: 🎭 Setup Playwright Environment
      shell: bash
      run: |
        echo "::group::Playwright Setup"
        cd ${{ github.action_path }}
        
        if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != "true" ]; then
          echo "📦 Installing Playwright browsers (cache miss)..."
          
          # Install Playwright with browsers and dependencies
          npx -y playwright@${{ steps.playwright-version.outputs.version }} install chromium --with-deps
          
          # Save installed dependencies list for caching
          mkdir -p ~/playwright-deps
          dpkg -l > ~/playwright-deps/installed-packages.txt
          
          echo "✅ Playwright browsers and dependencies installed"
        else
          echo "🚀 Using cached Playwright browsers"
          
          # Just ensure system dependencies are present (fast operation)
          # This handles cases where the runner image has changed
          npx -y playwright@${{ steps.playwright-version.outputs.version }} install-deps chromium || true
        fi
        echo "::endgroup::"
    
    # Step 6: Install runtime dependencies
    - name: 📦 Install YoFix Dependencies
      shell: bash
      run: |
        echo "::group::YoFix Dependencies Installation"
        echo "📦 Installing runtime dependencies..."
        cd ${{ github.action_path }}
        
        # List current directory contents
        echo "Current directory contents:"
        ls -la
        
        # Install only production dependencies including all externalized modules
        echo "Running: npm install --production --ignore-scripts"
        npm install --production --ignore-scripts
        
        # Rebuild native modules to ensure correct binaries
        echo "Rebuilding native modules..."
        npm rebuild
        
        # Verify key dependencies are installed
        echo "Verifying key dependencies:"
        for dep in sharp tree-sitter playwright firebase-admin; do
          if [ -d "node_modules/$dep" ]; then
            echo "✅ $dep installed"
          else
            echo "❌ $dep NOT found"
          fi
        done
        
        echo "✅ Runtime dependencies installed"
        echo "::endgroup::"
    
    # Step 7: Initialize Storage Provider
    - name: 🗄️ Initialize Storage Provider
      shell: bash
      run: |
        echo "::group::Storage Provider Setup"
        echo "Storage Provider: ${{ inputs.storage-provider }}"
        
        if [ "${{ inputs.storage-provider }}" = "firebase" ]; then
          if [ -n "${{ inputs.firebase-credentials }}" ] && [ -n "${{ inputs.storage-bucket }}" ]; then
            echo "✅ Firebase storage will be initialized"
            echo "Bucket: ${{ inputs.storage-bucket }}"
          fi
        fi
        
        if [ "${{ inputs.storage-provider }}" = "s3" ]; then
          echo "✅ S3 storage will be initialized"
          echo "Bucket: ${{ inputs.s3-bucket }}"
          echo "Region: ${{ inputs.aws-region }}"
        fi
        echo "::endgroup::"
    
    # Step 8: Prepare Test Environment
    - name: 🔧 Prepare Test Environment
      shell: bash
      run: |
        echo "::group::Test Environment Preparation"
        echo "Setting up environment variables..."
        echo "Auth Mode: ${{ inputs.auth-mode }}"
        echo "Smart Auth Enabled: ${{ inputs.enable-smart-auth }}"
        echo "AI Navigation Enabled: ${{ inputs.enable-ai-navigation }}"
        echo "AI Test Generation Enabled: ${{ inputs.enable-ai-test-generation }}"
        
        if [ -n "${{ inputs.auth-email }}" ] && [ -n "${{ inputs.auth-password }}" ]; then
          echo "✅ Authentication credentials configured"
        else
          echo "ℹ️ No authentication credentials provided"
        fi
        
        echo "✅ Test environment prepared"
        echo "::endgroup::"
    
    # Step 9: Run Visual Tests
    - name: 🧪 Execute Visual Tests
      id: visual-tests
      shell: bash
      run: |
        echo "::group::Visual Test Execution"
        echo "🚀 Starting YoFix visual tests..."
        echo "Test URL: ${{ inputs.preview-url }}"
        
        # Run the tests with error handling
        set +e  # Don't exit on error
        node ${{ github.action_path }}/dist/index.js
        EXIT_CODE=$?
        set -e
        
        if [ $EXIT_CODE -eq 0 ]; then
          echo "✅ Visual tests completed successfully"
          echo "test-status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Visual tests failed with exit code: $EXIT_CODE"
          echo "test-status=failed" >> $GITHUB_OUTPUT
          # Don't exit here, let continue-on-error handle it
        fi
        
        echo "::endgroup::"
        exit $EXIT_CODE
      env:
        INPUT_PREVIEW-URL: ${{ inputs.preview-url }}
        INPUT_GITHUB-TOKEN: ${{ inputs.github-token }}
        INPUT_CLAUDE-API-KEY: ${{ inputs.claude-api-key }}
        INPUT_STORAGE-PROVIDER: ${{ inputs.storage-provider }}
        INPUT_FIREBASE-CREDENTIALS: ${{ inputs.firebase-credentials }}
        INPUT_STORAGE-BUCKET: ${{ inputs.storage-bucket }}
        INPUT_S3-BUCKET: ${{ inputs.s3-bucket }}
        INPUT_AWS-REGION: ${{ inputs.aws-region }}
        INPUT_AWS-ACCESS-KEY-ID: ${{ inputs.aws-access-key-id }}
        INPUT_AWS-SECRET-ACCESS-KEY: ${{ inputs.aws-secret-access-key }}
        INPUT_REDIS-URL: ${{ inputs.redis-url }}
        INPUT_CACHE-TTL: ${{ inputs.cache-ttl }}
        INPUT_FIREBASE-TARGET: ${{ inputs.firebase-target }}
        INPUT_BUILD-SYSTEM: ${{ inputs.build-system }}
        INPUT_TEST-TIMEOUT: ${{ inputs.test-timeout }}
        INPUT_CLEANUP-DAYS: ${{ inputs.cleanup-days }}
        INPUT_VIEWPORTS: ${{ inputs.viewports }}
        INPUT_MAX-ROUTES: ${{ inputs.max-routes }}
        INPUT_AUTH-EMAIL: ${{ inputs.auth-email }}
        INPUT_AUTH-PASSWORD: ${{ inputs.auth-password }}
        INPUT_AUTH-LOGIN-URL: ${{ inputs.auth-login-url }}
        INPUT_ENABLE-SMART-AUTH: ${{ inputs.enable-smart-auth }}
        YOFIX_SMART_AUTH: ${{ inputs.enable-smart-auth }}
        INPUT_MCP-PROVIDER: ${{ inputs.mcp-provider }}
        INPUT_MCP-OPTIONS: ${{ inputs.mcp-options }}
        INPUT_ENABLE-AI-NAVIGATION: ${{ inputs.enable-ai-navigation }}
        INPUT_ENABLE-AI-TEST-GENERATION: ${{ inputs.enable-ai-test-generation }}
        INPUT_TEST-ROUTES: ${{ inputs.test-routes }}
        INPUT_CLEAR-CACHE: ${{ inputs.clear-cache }}
    
    # Step 10: Generate Test Summary
    - name: 📊 Generate Test Summary
      if: always()
      shell: bash
      run: |
        echo "::group::Test Summary"
        echo "## YoFix Visual Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.visual-tests.outputs.test-status }}" = "success" ]; then
          echo "✅ **Status:** All visual tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status:** Visual tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Preview URL:** ${{ inputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Viewports:** ${{ inputs.viewports }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Max Routes:** ${{ inputs.max-routes }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Storage Provider:** ${{ inputs.storage-provider }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ inputs.auth-email }}" ]; then
          echo "- **Authentication:** Enabled" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Authentication:** Disabled" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### AI Features" >> $GITHUB_STEP_SUMMARY
        echo "- **Smart Auth:** ${{ inputs.enable-smart-auth }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AI Navigation:** ${{ inputs.enable-ai-navigation }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AI Test Generation:** ${{ inputs.enable-ai-test-generation }}" >> $GITHUB_STEP_SUMMARY
        
        echo "::endgroup::"